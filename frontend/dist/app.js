(function() {
  angular.module('RPiCar', ['ngResource', 'ngSanitize', 'ngRoute', 'ngAnimate', 'ui.bootstrap', 'swUtils', 'swWebSocket']).config(function($routeProvider) {
    return $routeProvider.when('/', {
      templateUrl: 'controllers/car.html',
      controller: 'CarCtrl',
      label: 'Car'
    });
  }).run(function($location, $rootScope, swTitle) {
    $rootScope.swTitle = swTitle;
    return $rootScope.$on('$routeChangeSuccess', function(event, current, previous) {
      var baseTitle, ref;
      baseTitle = ((ref = current.$$route) != null ? ref.label : void 0) || '';
      swTitle.setTitleBase(baseTitle);
      swTitle.setTitleStart('');
      return swTitle.setTitleEnd('');
    });
  }).config(function($httpProvider) {
    return $httpProvider.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';
  });

}).call(this);

(function() {
  var BACKWARD_KEY_CODE, BTN_DIRECTIONS, FORWARD_KEY_CODE, LEFT_KEY_CODE, RIGHT_KEY_CODE, SPACE_KEY_CODE;

  SPACE_KEY_CODE = 32;

  FORWARD_KEY_CODE = 38;

  BACKWARD_KEY_CODE = 40;

  LEFT_KEY_CODE = 37;

  RIGHT_KEY_CODE = 39;

  BTN_DIRECTIONS = {
    forwardBtn: 'forward',
    backwardBtn: 'backward',
    leftBtn: 'left',
    rightBtn: 'right'
  };

  angular.module('RPiCar').controller('CarCtrl', function($scope, $routeParams, $http, $log, $interval) {
    var _getDirection, cancelInterval, carId, currentIntervals, sendCommand, sendMoveStatus;
    $scope.moveStatus = {
      forward: false,
      backward: false,
      left: false,
      right: false
    };
    carId = $routeParams.id;
    $scope.car = {
      name: 'Марк 1',
      address: '192.168.150.109'
    };
    $scope.commandLog = [];
    $scope.carCommandHandler = function(commandResponse) {
      var item;
      item = {
        response: JSON.parse(commandResponse),
        dt: new Date()
      };
      $scope.commandLog.unshift(item);
      if ($scope.commandLog.length > 5) {
        return $scope.commandLog.length = 5;
      }
    };
    $scope.move = function(direction, state) {
      var oldState;
      oldState = $scope.moveStatus[direction];
      $scope.moveStatus[direction] = state;
      if (oldState !== state) {
        return sendMoveStatus(direction, state);
      }
    };
    $scope.keyDownHandler = function(event) {
      var direction;
      direction = _getDirection(event);
      if (direction) {
        return $scope.move(direction, true);
      }
    };
    $scope.keyUpHandler = function(event) {
      var direction;
      direction = _getDirection(event);
      if (direction) {
        return $scope.move(direction, false);
      }
    };
    _getDirection = function(event) {
      var direction;
      if (event.keyCode === SPACE_KEY_CODE && event.target.type === 'button') {
        direction = BTN_DIRECTIONS[event.target.id];
        return direction;
      }
      if (event.keyCode === FORWARD_KEY_CODE) {
        return 'forward';
      }
      if (event.keyCode === BACKWARD_KEY_CODE) {
        return 'reverse';
      }
      if (event.keyCode === LEFT_KEY_CODE) {
        return 'left';
      }
      if (event.keyCode === RIGHT_KEY_CODE) {
        return 'right';
      }
      return void 0;
    };
    currentIntervals = {};
    sendMoveStatus = function(direction, state) {
      console.debug(direction, state);
      if (state) {
        sendCommand(direction);
        cancelInterval(direction);
        return currentIntervals[direction] = $interval(function() {
          return sendCommand(direction);
        }, 300);
      } else {
        cancelInterval(direction);
        if (direction === 'forward' || direction === 'reverse') {
          return sendCommand('stop');
        } else if (direction === 'left' || direction === 'right') {
          return sendCommand('center');
        }
      }
    };
    cancelInterval = function(name) {
      if (currentIntervals[name]) {
        $interval.cancel(currentIntervals[name]);
        return delete currentIntervals[name];
      }
    };
    return sendCommand = function(commandName) {
      var params, url;
      console.debug(commandName);
      url = "http://" + $scope.car.address + ":4242/command/";
      params = {
        name: commandName
      };
      return $http.post(url, $.param(params));
    };
  });

}).call(this);

(function() {
  angular.module('RPiCar').controller('MainCtrl', function($scope, $log) {
    return $scope.cars = [
      {
        id: '1',
        name: 'Марк 1'
      }
    ];
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
