(function() {
  angular.module('RPiCar', ['ngResource', 'ngSanitize', 'ngRoute', 'ngAnimate', 'ui.bootstrap', 'swUtils', 'swWebSocket']).config(function($routeProvider) {
    return $routeProvider.when('/', {
      templateUrl: 'controllers/car.html',
      controller: 'CarCtrl',
      label: 'Car'
    });
  }).run(function($location, $rootScope, swTitle) {
    $rootScope.swTitle = swTitle;
    return $rootScope.$on('$routeChangeSuccess', function(event, current, previous) {
      var baseTitle, ref;
      baseTitle = ((ref = current.$$route) != null ? ref.label : void 0) || '';
      swTitle.setTitleBase(baseTitle);
      swTitle.setTitleStart('');
      return swTitle.setTitleEnd('');
    });
  }).config(function($httpProvider) {
    return $httpProvider.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';
  });

}).call(this);

(function() {
  var BACKWARD_KEY_CODE, BTN_DIRECTIONS, FORWARD_KEY_CODE, LEFT_KEY_CODE, RIGHT_KEY_CODE, SPACE_KEY_CODE;

  SPACE_KEY_CODE = 32;

  FORWARD_KEY_CODE = 38;

  BACKWARD_KEY_CODE = 40;

  LEFT_KEY_CODE = 37;

  RIGHT_KEY_CODE = 39;

  BTN_DIRECTIONS = {
    forwardBtn: 'forward',
    backwardBtn: 'backward',
    leftBtn: 'left',
    rightBtn: 'right'
  };

  angular.module('RPiCar').controller('CarCtrl', function($scope, $routeParams, $http, $log, $interval) {
    var _getDirection, cancelInterval, carId, currentIntervals, sendCommand, sendMoveStatus;
    $scope.moveStatus = {
      forward: false,
      backward: false,
      left: false,
      right: false
    };
    carId = $routeParams.id;
    $scope.car = {
      name: 'Марк 1',
      address: '10.0.1.4'
    };
    $scope.commandLog = [];
    $scope.carCommandHandler = function(commandResponse) {
      var item;
      item = {
        response: JSON.parse(commandResponse),
        dt: new Date()
      };
      $scope.commandLog.unshift(item);
      if ($scope.commandLog.length > 5) {
        return $scope.commandLog.length = 5;
      }
    };
    $scope.move = function(direction, state) {
      var oldState;
      oldState = $scope.moveStatus[direction];
      $scope.moveStatus[direction] = state;
      if (oldState !== state) {
        return sendMoveStatus(direction, state);
      }
    };
    $scope.keyDownHandler = function(event) {
      var direction;
      direction = _getDirection(event);
      if (direction) {
        return $scope.move(direction, true);
      }
    };
    $scope.keyUpHandler = function(event) {
      var direction;
      direction = _getDirection(event);
      if (direction) {
        return $scope.move(direction, false);
      }
    };
    _getDirection = function(event) {
      var direction;
      if (event.keyCode === SPACE_KEY_CODE && event.target.type === 'button') {
        direction = BTN_DIRECTIONS[event.target.id];
        return direction;
      }
      if (event.keyCode === FORWARD_KEY_CODE) {
        return 'forward';
      }
      if (event.keyCode === BACKWARD_KEY_CODE) {
        return 'reverse';
      }
      if (event.keyCode === LEFT_KEY_CODE) {
        return 'left';
      }
      if (event.keyCode === RIGHT_KEY_CODE) {
        return 'right';
      }
      return void 0;
    };
    currentIntervals = {};
    sendMoveStatus = function(direction, state) {
      console.debug(direction, state);
      if (state) {
        sendCommand(direction);
        cancelInterval(direction);
        return currentIntervals[direction] = $interval(function() {
          return sendCommand(direction);
        }, 300);
      } else {
        cancelInterval(direction);
        if (direction === 'forward' || direction === 'reverse') {
          return sendCommand('stop');
        } else if (direction === 'left' || direction === 'right') {
          return sendCommand('center');
        }
      }
    };
    cancelInterval = function(name) {
      if (currentIntervals[name]) {
        $interval.cancel(currentIntervals[name]);
        return delete currentIntervals[name];
      }
    };
    return sendCommand = function(commandName) {
      var params, url;
      console.debug(commandName);
      url = "http://" + $scope.car.address + ":4242/command/";
      params = {
        name: commandName
      };
      return $http.post(url, $.param(params));
    };
  });

}).call(this);

(function() {
  angular.module('RPiCar').controller('MainCtrl', function($scope, $log) {
    return $scope.cars = [
      {
        id: '1',
        name: 'Марк 1'
      }
    ];
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9hcHAuY29mZmVlIiwiYXBwL2NvbnRyb2xsZXJzL2Nhci5jb2ZmZWUiLCJhcHAvY29udHJvbGxlcnMvbWFpbi5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFBQSxPQUFPLENBQUMsTUFBUixDQUFlLFFBQWYsRUFBeUIsQ0FDckIsWUFEcUIsRUFFckIsWUFGcUIsRUFHckIsU0FIcUIsRUFJckIsV0FKcUIsRUFNckIsY0FOcUIsRUFRckIsU0FScUIsRUFTckIsYUFUcUIsQ0FBekIsQ0FhQSxDQUFDLE1BYkQsQ0FhUSxTQUFDLGNBQUQ7V0FDSixjQUNJLENBQUMsSUFETCxDQUNVLEdBRFYsRUFFTTtNQUFBLFdBQUEsRUFBYSxzQkFBYjtNQUNBLFVBQUEsRUFBWSxTQURaO01BRUEsS0FBQSxFQUFPLEtBRlA7S0FGTjtFQURJLENBYlIsQ0FnQ0EsQ0FBQyxHQWhDRCxDQWdDSyxTQUFDLFNBQUQsRUFBWSxVQUFaLEVBQXdCLE9BQXhCO0lBQ0QsVUFBVSxDQUFDLE9BQVgsR0FBcUI7V0FDckIsVUFBVSxDQUFDLEdBQVgsQ0FBZSxxQkFBZixFQUFzQyxTQUFDLEtBQUQsRUFBUSxPQUFSLEVBQWlCLFFBQWpCO0FBQ2xDLFVBQUE7TUFBQSxTQUFBLHlDQUEyQixDQUFFLGVBQWpCLElBQTBCO01BQ3RDLE9BQU8sQ0FBQyxZQUFSLENBQXFCLFNBQXJCO01BQ0EsT0FBTyxDQUFDLGFBQVIsQ0FBc0IsRUFBdEI7YUFDQSxPQUFPLENBQUMsV0FBUixDQUFvQixFQUFwQjtJQUprQyxDQUF0QztFQUZDLENBaENMLENBeUNBLENBQUMsTUF6Q0QsQ0F5Q1EsU0FBQyxhQUFEO1dBQ0osYUFBYSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSyxDQUFBLGNBQUEsQ0FBcEMsR0FBc0Q7RUFEbEQsQ0F6Q1I7QUFBQTs7O0FDQUE7QUFBQSxNQUFBOztFQUFBLGNBQUEsR0FBaUI7O0VBRWpCLGdCQUFBLEdBQW1COztFQUNuQixpQkFBQSxHQUFvQjs7RUFDcEIsYUFBQSxHQUFnQjs7RUFDaEIsY0FBQSxHQUFpQjs7RUFFakIsY0FBQSxHQUFpQjtJQUNiLFVBQUEsRUFBWSxTQURDO0lBRWIsV0FBQSxFQUFhLFVBRkE7SUFHYixPQUFBLEVBQVMsTUFISTtJQUliLFFBQUEsRUFBVSxPQUpHOzs7RUFPakIsT0FBTyxDQUFDLE1BQVIsQ0FBZSxRQUFmLENBQ0EsQ0FBQyxVQURELENBQ1ksU0FEWixFQUN1QixTQUFDLE1BQUQsRUFBUyxZQUFULEVBQXVCLEtBQXZCLEVBQThCLElBQTlCLEVBQW9DLFNBQXBDO0FBRW5CLFFBQUE7SUFBQSxNQUFNLENBQUMsVUFBUCxHQUFvQjtNQUNoQixPQUFBLEVBQVMsS0FETztNQUVoQixRQUFBLEVBQVUsS0FGTTtNQUdoQixJQUFBLEVBQU0sS0FIVTtNQUloQixLQUFBLEVBQU8sS0FKUzs7SUFRcEIsS0FBQSxHQUFRLFlBQVksQ0FBQztJQUNyQixNQUFNLENBQUMsR0FBUCxHQUFhO01BQ1QsSUFBQSxFQUFNLFFBREc7TUFHVCxPQUFBLEVBQVMsVUFIQTs7SUFPYixNQUFNLENBQUMsVUFBUCxHQUFvQjtJQUNwQixNQUFNLENBQUMsaUJBQVAsR0FBMkIsU0FBQyxlQUFEO0FBQ3ZCLFVBQUE7TUFBQSxJQUFBLEdBQU87UUFDSCxRQUFBLEVBQVUsSUFBSSxDQUFDLEtBQUwsQ0FBVyxlQUFYLENBRFA7UUFFSCxFQUFBLEVBQVEsSUFBQSxJQUFBLENBQUEsQ0FGTDs7TUFJUCxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQWxCLENBQTBCLElBQTFCO01BRUEsSUFBRyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQWxCLEdBQTJCLENBQTlCO2VBQ0ksTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFsQixHQUEyQixFQUQvQjs7SUFQdUI7SUFZM0IsTUFBTSxDQUFDLElBQVAsR0FBYyxTQUFDLFNBQUQsRUFBWSxLQUFaO0FBQ1YsVUFBQTtNQUFBLFFBQUEsR0FBVyxNQUFNLENBQUMsVUFBVyxDQUFBLFNBQUE7TUFDN0IsTUFBTSxDQUFDLFVBQVcsQ0FBQSxTQUFBLENBQWxCLEdBQStCO01BQy9CLElBQUcsUUFBQSxLQUFZLEtBQWY7ZUFFSSxjQUFBLENBQWUsU0FBZixFQUEwQixLQUExQixFQUZKOztJQUhVO0lBUWQsTUFBTSxDQUFDLGNBQVAsR0FBd0IsU0FBQyxLQUFEO0FBQ3BCLFVBQUE7TUFBQSxTQUFBLEdBQVksYUFBQSxDQUFjLEtBQWQ7TUFDWixJQUFHLFNBQUg7ZUFDSSxNQUFNLENBQUMsSUFBUCxDQUFZLFNBQVosRUFBdUIsSUFBdkIsRUFESjs7SUFGb0I7SUFLeEIsTUFBTSxDQUFDLFlBQVAsR0FBc0IsU0FBQyxLQUFEO0FBQ2xCLFVBQUE7TUFBQSxTQUFBLEdBQVksYUFBQSxDQUFjLEtBQWQ7TUFDWixJQUFHLFNBQUg7ZUFDSSxNQUFNLENBQUMsSUFBUCxDQUFZLFNBQVosRUFBdUIsS0FBdkIsRUFESjs7SUFGa0I7SUFNdEIsYUFBQSxHQUFnQixTQUFDLEtBQUQ7QUFDWixVQUFBO01BQUEsSUFBRyxLQUFLLENBQUMsT0FBTixLQUFpQixjQUFqQixJQUFvQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQWIsS0FBcUIsUUFBNUQ7UUFDSSxTQUFBLEdBQVksY0FBZSxDQUFBLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBYjtBQUMzQixlQUFPLFVBRlg7O01BSUEsSUFBRyxLQUFLLENBQUMsT0FBTixLQUFpQixnQkFBcEI7QUFDSSxlQUFPLFVBRFg7O01BR0EsSUFBRyxLQUFLLENBQUMsT0FBTixLQUFpQixpQkFBcEI7QUFDSSxlQUFPLFVBRFg7O01BR0EsSUFBRyxLQUFLLENBQUMsT0FBTixLQUFpQixhQUFwQjtBQUNJLGVBQU8sT0FEWDs7TUFHQSxJQUFHLEtBQUssQ0FBQyxPQUFOLEtBQWlCLGNBQXBCO0FBQ0ksZUFBTyxRQURYOztBQUdBLGFBQU87SUFqQks7SUFtQmhCLGdCQUFBLEdBQW1CO0lBQ25CLGNBQUEsR0FBaUIsU0FBQyxTQUFELEVBQVksS0FBWjtNQUViLE9BQU8sQ0FBQyxLQUFSLENBQWMsU0FBZCxFQUF5QixLQUF6QjtNQUVBLElBQUcsS0FBSDtRQUNJLFdBQUEsQ0FBWSxTQUFaO1FBQ0EsY0FBQSxDQUFlLFNBQWY7ZUFDQSxnQkFBaUIsQ0FBQSxTQUFBLENBQWpCLEdBQThCLFNBQUEsQ0FDMUIsU0FBQTtpQkFDSSxXQUFBLENBQVksU0FBWjtRQURKLENBRDBCLEVBRzFCLEdBSDBCLEVBSGxDO09BQUEsTUFBQTtRQVNJLGNBQUEsQ0FBZSxTQUFmO1FBRUEsSUFBRyxTQUFBLEtBQWEsU0FBYixJQUEwQixTQUFBLEtBQWEsU0FBMUM7aUJBQ0ksV0FBQSxDQUFZLE1BQVosRUFESjtTQUFBLE1BRUssSUFBRyxTQUFBLEtBQWEsTUFBYixJQUF1QixTQUFBLEtBQWEsT0FBdkM7aUJBQ0QsV0FBQSxDQUFZLFFBQVosRUFEQztTQWJUOztJQUphO0lBb0JqQixjQUFBLEdBQWlCLFNBQUMsSUFBRDtNQUNiLElBQUcsZ0JBQWlCLENBQUEsSUFBQSxDQUFwQjtRQUNJLFNBQVMsQ0FBQyxNQUFWLENBQWlCLGdCQUFpQixDQUFBLElBQUEsQ0FBbEM7ZUFDQSxPQUFPLGdCQUFpQixDQUFBLElBQUEsRUFGNUI7O0lBRGE7V0FNakIsV0FBQSxHQUFjLFNBQUMsV0FBRDtBQUNWLFVBQUE7TUFBQSxPQUFPLENBQUMsS0FBUixDQUFjLFdBQWQ7TUFDQSxHQUFBLEdBQU0sU0FBQSxHQUFVLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBckIsR0FBNkI7TUFDbkMsTUFBQSxHQUFTO1FBQUMsSUFBQSxFQUFNLFdBQVA7O2FBQ1QsS0FBSyxDQUFDLElBQU4sQ0FBVyxHQUFYLEVBQWdCLENBQUMsQ0FBQyxLQUFGLENBQVEsTUFBUixDQUFoQjtJQUpVO0VBaEdLLENBRHZCO0FBZEE7OztBQ0FBO0VBQUEsT0FBTyxDQUFDLE1BQVIsQ0FBZSxRQUFmLENBQ0EsQ0FBQyxVQURELENBQ1ksVUFEWixFQUN3QixTQUFDLE1BQUQsRUFBUyxJQUFUO1dBRXBCLE1BQU0sQ0FBQyxJQUFQLEdBQWM7TUFBQztRQUNYLEVBQUEsRUFBSSxHQURPO1FBRVgsSUFBQSxFQUFNLFFBRks7T0FBRDs7RUFGTSxDQUR4QjtBQUFBIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKCdSUGlDYXInLCBbXG4gICAgJ25nUmVzb3VyY2UnXG4gICAgJ25nU2FuaXRpemUnXG4gICAgJ25nUm91dGUnXG4gICAgJ25nQW5pbWF0ZSdcblxuICAgICd1aS5ib290c3RyYXAnXG5cbiAgICAnc3dVdGlscydcbiAgICAnc3dXZWJTb2NrZXQnXG5dKVxuXG5cbi5jb25maWcgKCRyb3V0ZVByb3ZpZGVyKSAtPlxuICAgICRyb3V0ZVByb3ZpZGVyXG4gICAgICAgIC53aGVuKCcvJyxcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbnRyb2xsZXJzL2Nhci5odG1sJ1xuICAgICAgICAgIGNvbnRyb2xsZXI6ICdDYXJDdHJsJ1xuICAgICAgICAgIGxhYmVsOiAnQ2FyJ1xuICAgICAgICApXG4jICAgICAgICAud2hlbignLycsXG4jICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29udHJvbGxlcnMvbWFpbi5odG1sJ1xuIyAgICAgICAgICBjb250cm9sbGVyOiAnTWFpbkN0cmwnXG4jICAgICAgICAgIGxhYmVsOiAnJ1xuIyAgICAgICAgKVxuIyAgICAgICAgLndoZW4oJy9jYXIvOmlkLycsXG4jICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29udHJvbGxlcnMvY2FyLmh0bWwnXG4jICAgICAgICAgIGNvbnRyb2xsZXI6ICdDYXJDdHJsJ1xuIyAgICAgICAgICBsYWJlbDogJ0NhcidcbiMgICAgICAgIClcblxuXG4ucnVuICgkbG9jYXRpb24sICRyb290U2NvcGUsIHN3VGl0bGUpIC0+XG4gICAgJHJvb3RTY29wZS5zd1RpdGxlID0gc3dUaXRsZVxuICAgICRyb290U2NvcGUuJG9uICckcm91dGVDaGFuZ2VTdWNjZXNzJywgKGV2ZW50LCBjdXJyZW50LCBwcmV2aW91cykgLT5cbiAgICAgICAgYmFzZVRpdGxlID0gY3VycmVudC4kJHJvdXRlPy5sYWJlbCBvciAnJ1xuICAgICAgICBzd1RpdGxlLnNldFRpdGxlQmFzZShiYXNlVGl0bGUpXG4gICAgICAgIHN3VGl0bGUuc2V0VGl0bGVTdGFydCgnJylcbiAgICAgICAgc3dUaXRsZS5zZXRUaXRsZUVuZCgnJylcblxuXG4uY29uZmlnICgkaHR0cFByb3ZpZGVyKSAtPlxuICAgICRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5wb3N0WydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnIiwiU1BBQ0VfS0VZX0NPREUgPSAzMlxuXG5GT1JXQVJEX0tFWV9DT0RFID0gMzhcbkJBQ0tXQVJEX0tFWV9DT0RFID0gNDBcbkxFRlRfS0VZX0NPREUgPSAzN1xuUklHSFRfS0VZX0NPREUgPSAzOVxuXG5CVE5fRElSRUNUSU9OUyA9IHtcbiAgICBmb3J3YXJkQnRuOiAnZm9yd2FyZCdcbiAgICBiYWNrd2FyZEJ0bjogJ2JhY2t3YXJkJ1xuICAgIGxlZnRCdG46ICdsZWZ0J1xuICAgIHJpZ2h0QnRuOiAncmlnaHQnXG59XG5cbmFuZ3VsYXIubW9kdWxlKCdSUGlDYXInKVxuLmNvbnRyb2xsZXIgJ0NhckN0cmwnLCAoJHNjb3BlLCAkcm91dGVQYXJhbXMsICRodHRwLCAkbG9nLCAkaW50ZXJ2YWwpIC0+XG5cbiAgICAkc2NvcGUubW92ZVN0YXR1cyA9IHtcbiAgICAgICAgZm9yd2FyZDogZmFsc2VcbiAgICAgICAgYmFja3dhcmQ6IGZhbHNlXG4gICAgICAgIGxlZnQ6IGZhbHNlXG4gICAgICAgIHJpZ2h0OiBmYWxzZVxuICAgIH1cblxuICAgICMgVE9ET1xuICAgIGNhcklkID0gJHJvdXRlUGFyYW1zLmlkXG4gICAgJHNjb3BlLmNhciA9IHtcbiAgICAgICAgbmFtZTogJ9Cc0LDRgNC6IDEnLFxuIyAgICAgICAgYWRkcmVzczogJzE5Mi4xNjguMTUwLjEwOScsXG4gICAgICAgIGFkZHJlc3M6ICcxMC4wLjEuNCcsXG4jICAgICAgICBhZGRyZXNzOiAnMTI3LjAuMC4xJyxcbiAgICB9XG5cbiAgICAkc2NvcGUuY29tbWFuZExvZyA9IFtdXG4gICAgJHNjb3BlLmNhckNvbW1hbmRIYW5kbGVyID0gKGNvbW1hbmRSZXNwb25zZSkgLT5cbiAgICAgICAgaXRlbSA9IHtcbiAgICAgICAgICAgIHJlc3BvbnNlOiBKU09OLnBhcnNlKGNvbW1hbmRSZXNwb25zZSlcbiAgICAgICAgICAgIGR0OiBuZXcgRGF0ZSgpXG4gICAgICAgIH1cbiAgICAgICAgJHNjb3BlLmNvbW1hbmRMb2cudW5zaGlmdChpdGVtKVxuXG4gICAgICAgIGlmICRzY29wZS5jb21tYW5kTG9nLmxlbmd0aCA+IDVcbiAgICAgICAgICAgICRzY29wZS5jb21tYW5kTG9nLmxlbmd0aCA9IDVcblxuXG5cbiAgICAkc2NvcGUubW92ZSA9IChkaXJlY3Rpb24sIHN0YXRlKSAtPlxuICAgICAgICBvbGRTdGF0ZSA9ICRzY29wZS5tb3ZlU3RhdHVzW2RpcmVjdGlvbl1cbiAgICAgICAgJHNjb3BlLm1vdmVTdGF0dXNbZGlyZWN0aW9uXSA9IHN0YXRlXG4gICAgICAgIGlmIG9sZFN0YXRlICE9IHN0YXRlXG4jICAgICAgICAgICAgc2VuZE1vdmVTdGF0dXMoJHNjb3BlLm1vdmVTdGF0dXMpXG4gICAgICAgICAgICBzZW5kTW92ZVN0YXR1cyhkaXJlY3Rpb24sIHN0YXRlKVxuXG5cbiAgICAkc2NvcGUua2V5RG93bkhhbmRsZXIgPSAoZXZlbnQpIC0+XG4gICAgICAgIGRpcmVjdGlvbiA9IF9nZXREaXJlY3Rpb24oZXZlbnQpXG4gICAgICAgIGlmIGRpcmVjdGlvblxuICAgICAgICAgICAgJHNjb3BlLm1vdmUoZGlyZWN0aW9uLCB0cnVlKVxuXG4gICAgJHNjb3BlLmtleVVwSGFuZGxlciA9IChldmVudCkgLT5cbiAgICAgICAgZGlyZWN0aW9uID0gX2dldERpcmVjdGlvbihldmVudClcbiAgICAgICAgaWYgZGlyZWN0aW9uXG4gICAgICAgICAgICAkc2NvcGUubW92ZShkaXJlY3Rpb24sIGZhbHNlKVxuXG5cbiAgICBfZ2V0RGlyZWN0aW9uID0gKGV2ZW50KSAtPlxuICAgICAgICBpZiBldmVudC5rZXlDb2RlID09IFNQQUNFX0tFWV9DT0RFIGFuZCBldmVudC50YXJnZXQudHlwZSA9PSAnYnV0dG9uJ1xuICAgICAgICAgICAgZGlyZWN0aW9uID0gQlROX0RJUkVDVElPTlNbZXZlbnQudGFyZ2V0LmlkXVxuICAgICAgICAgICAgcmV0dXJuIGRpcmVjdGlvblxuXG4gICAgICAgIGlmIGV2ZW50LmtleUNvZGUgPT0gRk9SV0FSRF9LRVlfQ09ERVxuICAgICAgICAgICAgcmV0dXJuICdmb3J3YXJkJ1xuXG4gICAgICAgIGlmIGV2ZW50LmtleUNvZGUgPT0gQkFDS1dBUkRfS0VZX0NPREVcbiAgICAgICAgICAgIHJldHVybiAncmV2ZXJzZSdcblxuICAgICAgICBpZiBldmVudC5rZXlDb2RlID09IExFRlRfS0VZX0NPREVcbiAgICAgICAgICAgIHJldHVybiAnbGVmdCdcblxuICAgICAgICBpZiBldmVudC5rZXlDb2RlID09IFJJR0hUX0tFWV9DT0RFXG4gICAgICAgICAgICByZXR1cm4gJ3JpZ2h0J1xuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcblxuICAgIGN1cnJlbnRJbnRlcnZhbHMgPSB7fVxuICAgIHNlbmRNb3ZlU3RhdHVzID0gKGRpcmVjdGlvbiwgc3RhdGUpIC0+XG4jICAgICAgICBkYXRhID0gSlNPTi5zdHJpbmdpZnkobW92ZVN0YXR1cylcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhkaXJlY3Rpb24sIHN0YXRlKVxuXG4gICAgICAgIGlmIHN0YXRlXG4gICAgICAgICAgICBzZW5kQ29tbWFuZChkaXJlY3Rpb24pXG4gICAgICAgICAgICBjYW5jZWxJbnRlcnZhbChkaXJlY3Rpb24pICAgIyDQvdCwINCy0YHRj9C60LjQuSDRgdC70YPRh9Cw0LlcbiAgICAgICAgICAgIGN1cnJlbnRJbnRlcnZhbHNbZGlyZWN0aW9uXSA9ICRpbnRlcnZhbChcbiAgICAgICAgICAgICAgICAtPlxuICAgICAgICAgICAgICAgICAgICBzZW5kQ29tbWFuZChkaXJlY3Rpb24pXG4gICAgICAgICAgICAgICAgMzAwXG4gICAgICAgICAgICApXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGNhbmNlbEludGVydmFsKGRpcmVjdGlvbilcblxuICAgICAgICAgICAgaWYgZGlyZWN0aW9uID09ICdmb3J3YXJkJyBvciBkaXJlY3Rpb24gPT0gJ3JldmVyc2UnXG4gICAgICAgICAgICAgICAgc2VuZENvbW1hbmQoJ3N0b3AnKVxuICAgICAgICAgICAgZWxzZSBpZiBkaXJlY3Rpb24gPT0gJ2xlZnQnIG9yIGRpcmVjdGlvbiA9PSAncmlnaHQnXG4gICAgICAgICAgICAgICAgc2VuZENvbW1hbmQoJ2NlbnRlcicpXG5cbiAgICBjYW5jZWxJbnRlcnZhbCA9IChuYW1lKSAtPlxuICAgICAgICBpZiBjdXJyZW50SW50ZXJ2YWxzW25hbWVdXG4gICAgICAgICAgICAkaW50ZXJ2YWwuY2FuY2VsKGN1cnJlbnRJbnRlcnZhbHNbbmFtZV0pXG4gICAgICAgICAgICBkZWxldGUgY3VycmVudEludGVydmFsc1tuYW1lXVxuXG5cbiAgICBzZW5kQ29tbWFuZCA9IChjb21tYW5kTmFtZSkgLT5cbiAgICAgICAgY29uc29sZS5kZWJ1Zyhjb21tYW5kTmFtZSlcbiAgICAgICAgdXJsID0gXCJodHRwOi8vI3skc2NvcGUuY2FyLmFkZHJlc3N9OjQyNDIvY29tbWFuZC9cIlxuICAgICAgICBwYXJhbXMgPSB7bmFtZTogY29tbWFuZE5hbWV9XG4gICAgICAgICRodHRwLnBvc3QodXJsLCAkLnBhcmFtKHBhcmFtcykpXG5cbiIsImFuZ3VsYXIubW9kdWxlKCdSUGlDYXInKVxuLmNvbnRyb2xsZXIgJ01haW5DdHJsJywgKCRzY29wZSwgJGxvZykgLT5cbiAgICAjIFRPRE9cbiAgICAkc2NvcGUuY2FycyA9IFt7XG4gICAgICAgIGlkOiAnMScsXG4gICAgICAgIG5hbWU6ICfQnNCw0YDQuiAxJyxcbiAgICB9XVxuXG5cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
